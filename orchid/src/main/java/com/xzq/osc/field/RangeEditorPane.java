/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.xzq.osc.field;

import com.xzq.osc.JocInputMask;
import com.xzq.osc.JocValueField;
import com.xzq.osc.OrchidLocale;
import com.xzq.osc.OrchidUtils;
import com.xzq.osc.field.Range.Option;
import com.xzq.osc.field.Range.Sign;
import java.awt.Color;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.StringReader;
import javax.swing.AbstractCellEditor;
import javax.swing.DefaultCellEditor;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JToolBar;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.SwingConstants;
import javax.swing.border.LineBorder;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.PopupMenuEvent;
import javax.swing.event.PopupMenuListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableCellEditor;

/**
 *
 * @author zqxu
 */
public class RangeEditorPane extends JPanel {

  public static final Object BUTTON_OK = "ok";
  public static final Object BUTTON_ADD = "add";
  public static final Object BUTTON_PASTE = "paste";
  public static final Object BUTTON_DELETE = "delete";
  public static final Object BUTTON_TRASH = "trash";

  /**
   * Creates new form RangeEditorPane
   */
  public RangeEditorPane() {
    super();
    initComponents();
    customInitialize();
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jToolBar1 = new JToolBar();
    okButton = new JButton();
    addButton = new JButton();
    pasteButton = new JButton();
    deleteButton = new JButton();
    trashButton = new JButton();
    rangeTabbedPane = new JTabbedPane();
    jScrollPane1 = new JScrollPane();
    includeTable = new JTable();
    jScrollPane2 = new JScrollPane();
    excludeTable = new JTable();

    jToolBar1.setFloatable(false);
    jToolBar1.setRollover(true);

    okButton.setIcon(new ImageIcon(getClass().getResource("/com/xzq/osc/img/ok.png"))); // NOI18N
    okButton.setToolTipText(OrchidLocale.getString("REPANE_ACCEPT")); // NOI18N
    okButton.setEnabled(false);
    okButton.setFocusable(false);
    okButton.setHorizontalTextPosition(SwingConstants.CENTER);
    okButton.setVerticalTextPosition(SwingConstants.BOTTOM);
    okButton.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        okButtonActionPerformed(evt);
      }
    });
    jToolBar1.add(okButton);

    addButton.setIcon(new ImageIcon(getClass().getResource("/com/xzq/osc/img/plus.png"))); // NOI18N
    addButton.setToolTipText(OrchidLocale.getString("REPANE_NEWLINE")); // NOI18N
    addButton.setEnabled(false);
    addButton.setFocusable(false);
    addButton.setHorizontalTextPosition(SwingConstants.CENTER);
    addButton.setVerticalTextPosition(SwingConstants.BOTTOM);
    addButton.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        addButtonActionPerformed(evt);
      }
    });
    jToolBar1.add(addButton);

    pasteButton.setIcon(new ImageIcon(getClass().getResource("/com/xzq/osc/img/paste.png"))); // NOI18N
    pasteButton.setToolTipText(OrchidLocale.getString("REPANE_PASTE")); // NOI18N
    pasteButton.setEnabled(false);
    pasteButton.setFocusable(false);
    pasteButton.setHorizontalTextPosition(SwingConstants.CENTER);
    pasteButton.setVerticalTextPosition(SwingConstants.BOTTOM);
    pasteButton.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        pasteButtonActionPerformed(evt);
      }
    });
    jToolBar1.add(pasteButton);

    deleteButton.setIcon(new ImageIcon(getClass().getResource("/com/xzq/osc/img/minus.png"))); // NOI18N
    deleteButton.setToolTipText(OrchidLocale.getString("REPANE_DELETE")); // NOI18N
    deleteButton.setEnabled(false);
    deleteButton.setFocusable(false);
    deleteButton.setHorizontalTextPosition(SwingConstants.CENTER);
    deleteButton.setVerticalTextPosition(SwingConstants.BOTTOM);
    deleteButton.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        deleteButtonActionPerformed(evt);
      }
    });
    jToolBar1.add(deleteButton);

    trashButton.setIcon(new ImageIcon(getClass().getResource("/com/xzq/osc/img/trash.png"))); // NOI18N
    trashButton.setToolTipText(OrchidLocale.getString("REPANE_CLEAR")); // NOI18N
    trashButton.setEnabled(false);
    trashButton.setFocusable(false);
    trashButton.setHorizontalTextPosition(SwingConstants.CENTER);
    trashButton.setVerticalTextPosition(SwingConstants.BOTTOM);
    trashButton.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        trashButtonActionPerformed(evt);
      }
    });
    jToolBar1.add(trashButton);

    rangeTabbedPane.setEnabled(false);
    rangeTabbedPane.addChangeListener(new ChangeListener() {
      public void stateChanged(ChangeEvent evt) {
        rangeTabbedPaneStateChanged(evt);
      }
    });

    includeTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
    includeTable.setEnabled(false);
    includeTable.setRowHeight(21);
    jScrollPane1.setViewportView(includeTable);

    rangeTabbedPane.addTab("Select", jScrollPane1);

    excludeTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
    excludeTable.setEnabled(false);
    excludeTable.setRowHeight(21);
    jScrollPane2.setViewportView(excludeTable);

    rangeTabbedPane.addTab("exclude", jScrollPane2);

    GroupLayout layout = new GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(Alignment.LEADING)
      .addComponent(jToolBar1, GroupLayout.DEFAULT_SIZE, 405, Short.MAX_VALUE)
      .addComponent(rangeTabbedPane, GroupLayout.DEFAULT_SIZE, 405, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(Alignment.LEADING)
      .addGroup(Alignment.TRAILING, layout.createSequentialGroup()
        .addComponent(jToolBar1, GroupLayout.PREFERRED_SIZE, 25, GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(ComponentPlacement.RELATED)
        .addComponent(rangeTabbedPane, GroupLayout.DEFAULT_SIZE, 283, Short.MAX_VALUE))
    );
  }// </editor-fold>//GEN-END:initComponents

  private void okButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
    if (commitRangeEditing(getActiveTable())) {
      fireActionPerformed(evt);
    }
  }//GEN-LAST:event_okButtonActionPerformed

  private void addButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
    JTable table = getActiveTable();
    if (commitRangeEditing(table)) {
      ((RangeTableModel) table.getModel()).appendRange(new Range());
    }
  }//GEN-LAST:event_addButtonActionPerformed

  @SuppressWarnings("unchecked")
  private void pasteButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_pasteButtonActionPerformed
    JTable table = getActiveTable();
    if (!commitRangeEditing(table)) {
      return;
    }
    String text = OrchidUtils.getClipboardString();
    if (text == null) {
      return;
    }
    String line;
    RangeTableModel tableModel = (RangeTableModel) table.getModel();
    BufferedReader reader = new BufferedReader(new StringReader(text));
    try {
      while ((line = reader.readLine()) != null) {
        if (tableModel.getRowCount() > 0 && !model.getMultipleRange()) {
          break;
        }
        Range range = parseLine(line);
        if (!range.isEmpty()) {
          tableModel.appendRange(range);
        }
      }
      reader.close();
    } catch (IOException ex) {
      // ignore exception
    }
  }//GEN-LAST:event_pasteButtonActionPerformed

  @SuppressWarnings("unchecked")
  private Range parseLine(String line) {
    String[] values = line.split("\t");
    try {
      Range range = new Range(parseValue(values[0]));
      if (model.getRangeInterval() && values.length > 1) {
        range.setHighValue(parseValue(values[1]));
      }
      return range;
    } catch (Exception ex) {
      return new Range();
    }
  }

  private Object parseValue(String text) {
    if (inputMasker != null) {
      text = inputMasker.replace("", 0, 0, text);
    }
    return model.parseValue(text);
  }

  private void deleteButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
    JTable table = getActiveTable();
    cancelRangeEditing(table);
    int[] rows = table.getSelectedRows();
    for (int i = rows.length - 1; i >= 0; i--) {
      ((RangeTableModel) table.getModel()).deleteRangeAtRow(rows[i]);
    }
  }//GEN-LAST:event_deleteButtonActionPerformed

  private void trashButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_trashButtonActionPerformed
    cancelRangeEditing(getActiveTable());
    includeModel.clear();
    excludeModel.clear();
  }//GEN-LAST:event_trashButtonActionPerformed

  private void rangeTabbedPaneStateChanged(ChangeEvent evt) {//GEN-FIRST:event_rangeTabbedPaneStateChanged
    int index = rangeTabbedPane.getSelectedIndex();
    index = index == 0 ? 1 : 0;
    JTable table = getRangeTable(index);
    if (!commitRangeEditing(table)) {
      rangeTabbedPane.setSelectedIndex(index);
    } else {
      deleteButton.setEnabled(getActiveTable().getRowCount() > 0);
    }
  }//GEN-LAST:event_rangeTabbedPaneStateChanged

  private JTable getActiveTable() {
    return getRangeTable(rangeTabbedPane.getSelectedIndex());
  }

  private JTable getRangeTable(int tabIndex) {
    return tabIndex == 0 ? includeTable : excludeTable;
  }
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private JButton addButton;
  private JButton deleteButton;
  private JTable excludeTable;
  private JTable includeTable;
  private JScrollPane jScrollPane1;
  private JScrollPane jScrollPane2;
  private JToolBar jToolBar1;
  private JButton okButton;
  private JButton pasteButton;
  private JTabbedPane rangeTabbedPane;
  private JButton trashButton;
  // End of variables declaration//GEN-END:variables
  private static final int[] columnWidths = {40, 170, 170};
  private String incTabTitle;
  private String excTabTitle;
  private RangeModel model;
  private RangeTableModel includeModel;
  private RangeTableModel excludeModel;
  private ValueEditor valueEditor;
  private ValueRenderer valueRenderer;
  private JocInputMask inputMasker;
  private ValuePickListener[] valuePickListeners;

  private void customInitialize() {
    this.incTabTitle = OrchidLocale.getString("REPANE_INCTAB");
    this.excTabTitle = OrchidLocale.getString("REPANE_EXCTAB");
    valueEditor = new ValueEditor(new ValueModel());
    valueRenderer = new ValueRenderer();
    includeModel = new RangeTableModel(Sign.I);
    excludeModel = new RangeTableModel(Sign.E);
    updateRangeTabsTitle();
    initializeRangeTable(includeTable, includeModel);
    initializeRangeTable(excludeTable, excludeModel);
    includeTable.getTableHeader().setReorderingAllowed(false);
    excludeTable.getTableHeader().setReorderingAllowed(false);
  }

  private void initializeRangeTable(JTable table, RangeTableModel model) {
    Sign sign = model.getSign();
    table.setModel(model);
    table.setDefaultEditor(Object.class, valueEditor);
    table.setDefaultRenderer(Object.class, valueRenderer);
    table.setDefaultEditor(Option.class, new OptionEditor(sign));
    table.setDefaultRenderer(Option.class, new OptionRenderer(sign));
    model.addTableModelListener(getTableModelListener());
  }

  private TableModelListener getTableModelListener() {
    return new TableModelListener() {
      @Override
      public void tableChanged(TableModelEvent e) {
        updateRangeTabsTitle();
        updateControlsEnabled();
        okButton.setEnabled(true);
      }
    };
  }

  private void updateRangeTabsTitle() {
    int incRowCount = includeModel.getRowCount();
    if (incRowCount == 0) {
      rangeTabbedPane.setTitleAt(0, incTabTitle);
    } else {
      rangeTabbedPane.setTitleAt(0, incTabTitle + " (" + incRowCount + ")");
    }
    int excRowCount = excludeModel.getRowCount();
    if (excRowCount == 0) {
      rangeTabbedPane.setTitleAt(1, excTabTitle);
    } else {
      rangeTabbedPane.setTitleAt(1, excTabTitle + " (" + excRowCount + ")");
    }
  }

  @Override
  public void setEnabled(boolean enabled) {
    super.setEnabled(enabled);
    updateControlsEnabled();
  }

  private void updateControlsEnabled() {
    int rowCount = includeModel.getRowCount() + excludeModel.getRowCount();
    boolean enabled = isEnabled();
    addButton.setEnabled(enabled && model != null
            && (model.getMultipleRange() || rowCount == 0));
    pasteButton.setEnabled(addButton.isEnabled() && model.parseSupported());
    deleteButton.setEnabled(enabled && getActiveTable().getRowCount() > 0);
    trashButton.setEnabled(enabled && rowCount > 0);
    includeTable.setEnabled(enabled && model != null);
    excludeTable.setEnabled(enabled && model != null);
    rangeTabbedPane.setEnabled(enabled && model != null);
  }

  public void updateEditorPane(RangeModel model, JocInputMask inputMasker,
          boolean useValuePicker, ValuePicker valuePicker,
          String valuePickerKey, ValuePickListener[] valuePickListeners) {
    releaseEditorPane();
    this.model = model;
    valueRenderer.setRangeModel(model);
    JocValueField field = (JocValueField) valueEditor.getComponent();
    ((ValueModel) field.getModel()).setRangeModel(model);
    if (inputMasker != null) {
      inputMasker.maskTextComponent(field);
    }
    this.inputMasker = inputMasker;
    field.setUseValuePicker(useValuePicker);
    field.setValuePicker(valuePicker);
    field.setValuePickerKey(valuePickerKey);
    if (valuePickListeners != null) {
      for (ValuePickListener l : valuePickListeners) {
        field.addValuePickListener(l);
      }
    }
    this.valuePickListeners = valuePickListeners;
    if (this.model == null) {
      updateControlsEnabled();
    } else {
      updateRangeTableModels();
    }
    okButton.setEnabled(false);
  }

  @SuppressWarnings("unchecked")
  private void updateRangeTableModels() {
    RangeList<Object> incRanges = new RangeList<Object>();
    RangeList<Object> excRanges = new RangeList<Object>();
    RangeList<Object> wholeRanges = model.getWholeRanges();
    for (Range range : wholeRanges) {
      if (range.getSign() == Sign.I) {
        incRanges.add(range);
      } else {
        excRanges.add(range);
      }
    }
    updateRangeTable(includeTable, incRanges);
    updateRangeTable(excludeTable, excRanges);
  }

  private void updateRangeTable(JTable table, RangeList rangeList) {
    RangeTableModel tableModel = (RangeTableModel) table.getModel();
    tableModel.setRangeList(rangeList);
    tableModel.setRangeInterval(model.getRangeInterval());
    for (int c = 0; c < table.getColumnCount(); c++) {
      table.getColumnModel().getColumn(c).setPreferredWidth(columnWidths[c]);
    }
  }

  public void releaseEditorPane() {
    cancelRangeEditing(getActiveTable());
    JocValueField field = (JocValueField) valueEditor.getComponent();
    if (model != null) {
      model = null;
      includeModel.setRangeList(null);
      excludeModel.setRangeList(null);
      valueRenderer.setRangeModel(null);
      ((ValueModel) field.getModel()).setRangeModel(null);
      updateControlsEnabled();
    }
    if (inputMasker != null) {
      inputMasker.unmaskTextComponent(field);
      inputMasker = null;
    }
    field.setUseValuePicker(false);
    field.setValuePicker(null);
    field.setValuePickerKey(null);
    if (valuePickListeners != null) {
      for (ValuePickListener l : valuePickListeners) {
        field.removeValuePickListener(l);
      }
      valuePickListeners = null;
    }
  }

  @SuppressWarnings("unchecked")
  public RangeList getWholeRanges() {
    if (!commitRangeEditing(getActiveTable())) {
      cancelRangeEditing(getActiveTable());
    }
    RangeList<Object> wholeRanges = new RangeList<Object>();
    RangeList<Object> incRanges = includeModel.getRangeList();
    RangeList<Object> excRanges = excludeModel.getRangeList();
    for (Range range : excRanges) {
      if (range != null && !range.isEmpty()
              && !wholeRanges.contains(range)) {
        wholeRanges.add(range);
      }
    }
    for (Range range : incRanges) {
      if (range != null && !range.isEmpty()
              && !wholeRanges.contains(range)) {
        wholeRanges.add(range);
      }
    }
    return wholeRanges;
  }

  public void addActionListener(ActionListener l) {
    listenerList.add(ActionListener.class, l);
  }

  public void removeActionListener(ActionListener l) {
    listenerList.remove(ActionListener.class, l);
  }

  protected void fireActionPerformed(ActionEvent evt) {
    for (ActionListener l : listenerList.getListeners(ActionListener.class)) {
      l.actionPerformed(evt);
    }
  }

  private boolean commitRangeEditing(JTable table) {
    if (table.getCellEditor() != null) {
      return table.getCellEditor().stopCellEditing();
    }
    return true;
  }

  private void cancelRangeEditing(JTable table) {
    if (table.getCellEditor() != null) {
      table.getCellEditor().cancelCellEditing();
    }
  }

  public JButton getActionButton(Object key) {
    if (key == BUTTON_OK) {
      return okButton;
    } else if (key == BUTTON_ADD) {
      return addButton;
    } else if (key == BUTTON_PASTE) {
      return pasteButton;
    } else if (key == BUTTON_DELETE) {
      return deleteButton;
    } else if (key == BUTTON_TRASH) {
      return trashButton;
    } else {
      return null;
    }
  }

  private static class RangeTableModel extends AbstractTableModel {

    private Sign sign;
    private boolean rangeInterval;
    private RangeList rangeList;

    public RangeTableModel(Sign sign) {
      this.sign = sign;
    }

    public Sign getSign() {
      return sign;
    }

    public RangeList getRangeList() {
      return rangeList;
    }

    public void setRangeList(RangeList rangeList) {
      this.rangeList = rangeList;
      fireTableDataChanged();
    }

    @SuppressWarnings("unchecked")
    public Range getRange(int rowIndex) {
      return ((RangeList<Object>) rangeList).get(rowIndex);
    }

    public boolean isRangeInterval() {
      return rangeInterval;
    }

    public void setRangeInterval(boolean rangeInterval) {
      if (rangeInterval != this.rangeInterval) {
        this.rangeInterval = rangeInterval;
        fireTableStructureChanged();
      }
    }

    public void clear() {
      if (getRowCount() > 0) {
        rangeList.clear();
        fireTableDataChanged();
      }
    }

    @Override
    public int getRowCount() {
      return rangeList == null ? 0 : rangeList.size();
    }

    @Override
    public int getColumnCount() {
      return rangeInterval ? 3 : 2;
    }

    @Override
    public Class<?> getColumnClass(int columnIndex) {
      return columnIndex == 0 ? Option.class : Object.class;
    }

    @Override
    public String getColumnName(int column) {
      switch (column) {
        case 1:
          return OrchidLocale.getString("LOWVALUE_HEADER");
        case 2:
          return OrchidLocale.getString("HIGHVALUE_HEADER");
        default:
          return OrchidLocale.getString("OPTION_HEADER");
      }
    }

    @SuppressWarnings("unchecked")
    public void appendRange(Range range) {
      int rowIndex = getRowCount();
      range.setSign(sign);
      rangeList.add(range);
      fireTableRowsInserted(rowIndex, rowIndex);
    }

    public void deleteRangeAtRow(int rowIndex) {
      rangeList.remove(rowIndex);
      fireTableRowsDeleted(rowIndex, rowIndex);
    }

    @Override
    @SuppressWarnings("unchecked")
    public Object getValueAt(int rowIndex, int columnIndex) {
      Range range = ((RangeList<Object>) rangeList).get(rowIndex);
      switch (columnIndex) {
        case 1:
          return range.getLowValue();
        case 2:
          return range.getHighValue();
        default:
          return range.getOption();
      }
    }

    @Override
    public boolean isCellEditable(int rowIndex, int columnIndex) {
      return rangeList != null;
    }

    @Override
    @SuppressWarnings("unchecked")
    public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
      Range range = ((RangeList<Object>) rangeList).get(rowIndex);
      Option option = range.getOption();
      try {
        switch (columnIndex) {
          case 1:
            if (OrchidUtils.equals(range.getLowValue(), aValue)) {
              return;
            }
            range.setLowValue(aValue);
            break;
          case 2:
            if (OrchidUtils.equals(range.getHighValue(), aValue)) {
              return;
            }
            range.setHighValue(aValue);
            break;
          default:
            if (OrchidUtils.equals(range.getOption(), aValue)) {
              return;
            }
            range.setOption((Option) aValue);
            break;
        }
        fireTableCellUpdated(rowIndex, columnIndex);
        if (option != range.getOption()) {
          fireTableCellUpdated(rowIndex, 0);
        }
      } catch (Exception ex) {
        //ignore exception
      }
    }
  }

  private static class OptionEditor extends AbstractCellEditor
          implements TableCellEditor {

    private Sign sign;
    private JLabel optionLabel;
    private OptionsPopupMenu optionsPopup;

    public OptionEditor(Sign sign) {
      this.sign = sign;
      optionLabel = new JLabel();
      optionLabel.setHorizontalAlignment(SwingConstants.CENTER);
      optionLabel.addMouseListener(new MouseAdapter() {
        @Override
        public void mouseReleased(MouseEvent e) {
          optionLabelMouseReleased(e);
        }
      });
      optionsPopup = new OptionsPopupMenu(sign);
      optionsPopup.addActionListener(new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
          fireEditingStopped();
        }
      });
      optionsPopup.addPopupMenuListener(new PopupMenuListener() {
        @Override
        public void popupMenuWillBecomeVisible(PopupMenuEvent e) {
        }

        @Override
        public void popupMenuWillBecomeInvisible(PopupMenuEvent e) {
        }

        @Override
        public void popupMenuCanceled(PopupMenuEvent e) {
          fireEditingCanceled();
        }
      });
    }

    private void optionLabelMouseReleased(MouseEvent e) {
      OrchidUtils.showPopupMenu(optionsPopup, optionLabel);
    }

    @Override
    public Object getCellEditorValue() {
      return optionsPopup.getSelected();
    }

    @Override
    public Component getTableCellEditorComponent(JTable table, Object value,
            boolean isSelected, int row, int column) {
      optionLabel.setIcon(RangeUtils.getOptionIcon(sign, (Option) value));
      RangeTableModel model = (RangeTableModel) table.getModel();
      Range range = model.getRange(table.convertRowIndexToModel(row));
      optionsPopup.updateMenuItems(range);
      return optionLabel;
    }
  }

  private static class OptionRenderer extends DefaultTableCellRenderer {

    private Sign sign;

    public OptionRenderer(Sign sign) {
      this.sign = sign;
      setHorizontalAlignment(SwingConstants.CENTER);
    }

    @Override
    public Component getTableCellRendererComponent(JTable table,
            Object value, boolean isSelected, boolean hasFocus, int row,
            int column) {
      setIcon(RangeUtils.getOptionIcon(sign, (Option) value));
      return super.getTableCellRendererComponent(table, null, isSelected,
              hasFocus, row, column);
    }
  }

  @SuppressWarnings("unchecked")
  private static class ValueEditor extends DefaultCellEditor {

    private RangeModel rangeModel;
    private Range editingRange;
    private int editingColumn;

    public ValueEditor(ValueModel valueModel) {
      super(new JocValueField(valueModel));
    }

    @Override
    public JocValueField getComponent() {
      return (JocValueField) super.getComponent();
    }

    public RangeModel getRangeModel() {
      return rangeModel;
    }

    public void setRangeModel(RangeModel rangeModel) {
      this.rangeModel = rangeModel;
    }

    @Override
    public Object getCellEditorValue() {
      return editingColumn == 1
              ? editingRange.getLowValue() : editingRange.getHighValue();
    }

    @Override
    public Component getTableCellEditorComponent(JTable table,
            Object value, boolean isSelected, int row, int column) {
      editorComponent.setBorder(new LineBorder(Color.BLACK));
      RangeTableModel model = (RangeTableModel) table.getModel();
      Range range = model.getRange(table.convertRowIndexToModel(row));
      editingRange = range.clone();
      editingColumn = column;
      getComponent().setValue(value);
      return editorComponent;
    }

    @Override
    public boolean stopCellEditing() {
      try {
        Object value = getComponent().getValue();
        if (editingColumn == 1) {
          editingRange.setLowValue(value);
        } else {
          editingRange.setHighValue(value);
        }
        return super.stopCellEditing();
      } catch (Exception ex) {
        editorComponent.setBorder(new LineBorder(Color.RED));
        return false;
      }
    }
  }

  private static class ValueModel extends AbstractValueModel<Object> {

    private RangeModel rangeModel;

    public ValueModel() {
      super(null, null, null);
    }

    public RangeModel getRangeModel() {
      return rangeModel;
    }

    public void setRangeModel(RangeModel rangeModel) {
      Class oClass = getValueClass();
      this.rangeModel = rangeModel;
      Class nClass = getValueClass();
      if (!OrchidUtils.equals(oClass, nClass)) {
        firePropertyChange("valueClass", oClass, nClass);
      }
      this.value = null;
      firePropertyChange("value", value, value);
    }

    @Override
    @SuppressWarnings("unchecked")
    public Class<? extends Object> getValueClass() {
      return rangeModel == null ? Object.class : rangeModel.getValueClass();
    }

    @Override
    public Object parseValue(String text) {
      return rangeModel == null ? text : rangeModel.parseValue(text);
    }

    @Override
    @SuppressWarnings("unchecked")
    public String formatValue(Object value) {
      return rangeModel == null
              ? String.valueOf(value) : rangeModel.formatValue(value);
    }

    @Override
    public boolean parseSupported() {
      return rangeModel == null ? false : rangeModel.parseSupported();
    }

    @Override
    public AbstractValueModel<Object> clone() {
      throw new UnsupportedOperationException("Not supported yet.");
    }
  }

  @SuppressWarnings("unchecked")
  private static class ValueRenderer extends DefaultTableCellRenderer {

    public RangeModel rangeModel;

    public RangeModel getRangeModel() {
      return rangeModel;
    }

    public void setRangeModel(RangeModel rangeModel) {
      this.rangeModel = rangeModel;
    }

    @Override
    public Component getTableCellRendererComponent(JTable table,
            Object value, boolean isSelected, boolean hasFocus, int row,
            int column) {
      Component rendererComponent = super.getTableCellRendererComponent(
              table, value, isSelected, hasFocus, row, column);
      if (rangeModel != null) {
        setText(rangeModel.formatValue(value));
      }
      return rendererComponent;
    }
  }
}
