/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PrintPreviewDialog.java
 *
 * Created on 2010-11-24, 19:03:13
 */
package com.xzq.osc;

import com.xzq.osc.JocMessageLabel.Type;
import com.xzq.osc.about.DefaultOrchidAbout;
import com.xzq.osc.about.OrchidAboutIntf;
import com.xzq.osc.print.Mechanism;
import com.xzq.osc.print.PaperSizeException;
import com.xzq.osc.print.PrintUtils;
import java.awt.*;
import java.awt.event.KeyEvent;
import java.awt.event.WindowEvent;
import java.awt.geom.Line2D;
import java.awt.image.BufferedImage;
import java.awt.print.*;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ExecutionException;
import javax.print.*;
import javax.print.attribute.*;
import javax.print.attribute.standard.*;
import javax.swing.*;

/**
 *
 * @author zqxu
 */
public class JocPrintPreview extends JPanel
        implements OrchidAboutIntf {

  private static DocFlavor docFlavor = DocFlavor.SERVICE_FORMATTED.PAGEABLE;
  private PrintCanvasPane printCanvas;

  /**
   * Constructor for JocPrintPreview
   */
  public JocPrintPreview() {
    super();
    initComponents();
    customInitialize();
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jToolBar2 = new javax.swing.JToolBar();
    btnSettings = new javax.swing.JButton();
    sptSettings = new javax.swing.JToolBar.Separator();
    btnPrevious = new javax.swing.JButton();
    btnNext = new javax.swing.JButton();
    jSeparator1 = new javax.swing.JToolBar.Separator();
    lbPageIndex = new javax.swing.JLabel();
    txfPage = new javax.swing.JTextField();
    lbPageCount = new javax.swing.JLabel();
    jSeparator2 = new javax.swing.JToolBar.Separator();
    cmbRate = new javax.swing.JComboBox();
    jSeparator3 = new javax.swing.JToolBar.Separator();
    btnPrint = new javax.swing.JButton();
    jSeparator4 = new javax.swing.JToolBar.Separator();
    btnExit = new javax.swing.JButton();
    jScrollPane1 = new javax.swing.JScrollPane();
    pnContainer = new javax.swing.JPanel();
    jPanel1 = new javax.swing.JPanel();
    lbMessage = new com.xzq.osc.JocMessageLabel();
    lbPrinter = new javax.swing.JLabel();

    jToolBar2.setBackground(new java.awt.Color(255, 204, 204));
    jToolBar2.setFloatable(false);
    jToolBar2.setRollover(true);

    btnSettings.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/xzq/osc/img/printer_setup.png"))); // NOI18N
    btnSettings.setToolTipText(OrchidLocale.getString("PRINT_SETTINGS_TIP")); // NOI18N
    btnSettings.setFocusable(false);
    btnSettings.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    btnSettings.setOpaque(false);
    btnSettings.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    btnSettings.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btnSettingsActionPerformed(evt);
      }
    });
    jToolBar2.add(btnSettings);
    jToolBar2.add(sptSettings);

    btnPrevious.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/xzq/osc/img/page_prev.png"))); // NOI18N
    btnPrevious.setToolTipText(OrchidLocale.getString("PREVIOUS_PAGE_TIP")); // NOI18N
    btnPrevious.setFocusable(false);
    btnPrevious.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    btnPrevious.setOpaque(false);
    btnPrevious.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    btnPrevious.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btnPreviousActionPerformed(evt);
      }
    });
    jToolBar2.add(btnPrevious);

    btnNext.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/xzq/osc/img/page_next.png"))); // NOI18N
    btnNext.setToolTipText(OrchidLocale.getString("NEXT_PAGE_TIP")); // NOI18N
    btnNext.setFocusable(false);
    btnNext.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    btnNext.setOpaque(false);
    btnNext.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    btnNext.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btnNextActionPerformed(evt);
      }
    });
    jToolBar2.add(btnNext);
    jToolBar2.add(jSeparator1);

    lbPageIndex.setText(OrchidLocale.getString("PAGE_INDEX_TITLE")); // NOI18N
    jToolBar2.add(lbPageIndex);

    txfPage.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
    txfPage.setText("1");
    txfPage.setToolTipText(OrchidLocale.getString("PAGE_INDEX_TIP")); // NOI18N
    txfPage.setMaximumSize(new java.awt.Dimension(40, 19));
    txfPage.addKeyListener(new java.awt.event.KeyAdapter() {
      public void keyTyped(java.awt.event.KeyEvent evt) {
        txfPageKeyTyped(evt);
      }
    });
    jToolBar2.add(txfPage);

    lbPageCount.setText(" / 0 ");
    lbPageCount.setToolTipText(OrchidLocale.getString("PAGE_COUNT_TIP")); // NOI18N
    jToolBar2.add(lbPageCount);
    jToolBar2.add(jSeparator2);

    cmbRate.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "500%", "300%", "200%", "150%", "100%", "75%", "50%" }));
    cmbRate.setSelectedIndex(4);
    cmbRate.setToolTipText(OrchidLocale.getString("ZOOM_RATE_TIP")); // NOI18N
    cmbRate.setMaximumSize(new java.awt.Dimension(60, 19));
    cmbRate.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        cmbRateItemStateChanged(evt);
      }
    });
    jToolBar2.add(cmbRate);
    jToolBar2.add(jSeparator3);

    btnPrint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/xzq/osc/img/printer.png"))); // NOI18N
    btnPrint.setToolTipText(OrchidLocale.getString("PRINT_TIP")); // NOI18N
    btnPrint.setFocusable(false);
    btnPrint.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    btnPrint.setOpaque(false);
    btnPrint.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    btnPrint.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btnPrintActionPerformed(evt);
      }
    });
    jToolBar2.add(btnPrint);
    jToolBar2.add(jSeparator4);

    btnExit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/xzq/osc/img/exit.png"))); // NOI18N
    btnExit.setToolTipText(OrchidLocale.getString("EXIT_PREVIEW_TIP")); // NOI18N
    btnExit.setFocusable(false);
    btnExit.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    btnExit.setOpaque(false);
    btnExit.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    btnExit.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btnExitActionPerformed(evt);
      }
    });
    jToolBar2.add(btnExit);

    pnContainer.setBackground(new java.awt.Color(204, 204, 255));
    pnContainer.setLayout(new java.awt.GridBagLayout());
    jScrollPane1.setViewportView(pnContainer);

    jPanel1.setLayout(new java.awt.BorderLayout(5, 0));

    lbMessage.setBorder(javax.swing.BorderFactory.createEtchedBorder());
    jPanel1.add(lbMessage, java.awt.BorderLayout.CENTER);

    lbPrinter.setText(OrchidLocale.getString("PRINTER_TITLE")); // NOI18N
    jPanel1.add(lbPrinter, java.awt.BorderLayout.LINE_END);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
          .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 480, Short.MAX_VALUE)
          .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 480, Short.MAX_VALUE)
          .addComponent(jToolBar2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 480, Short.MAX_VALUE))
        .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jToolBar2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 490, Short.MAX_VALUE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addContainerGap())
    );
  }// </editor-fold>//GEN-END:initComponents

    private void btnSettingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSettingsActionPerformed
      MediaSizeName sizeName = null;
      Attribute media = attributeSet.get(Media.class);
      if (media instanceof MediaSizeName) {
        sizeName = (MediaSizeName) media;
      }
      if (mechanism == Mechanism.PrinterJob) {
        printDialog2D();
      } else {
        pageDialog(pagesList.get(0).getPageFormat(0), sizeName);
      }
    }//GEN-LAST:event_btnSettingsActionPerformed

    private void btnPreviousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPreviousActionPerformed
      setCurrentPage(pageIndex - 1);
    }//GEN-LAST:event_btnPreviousActionPerformed

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
      setCurrentPage(pageIndex + 1);
    }//GEN-LAST:event_btnNextActionPerformed

    private void txfPageKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txfPageKeyTyped
      if (evt.getKeyChar() != KeyEvent.VK_ENTER) {
        return;
      }
      try {
        int inputIndex = Integer.parseInt(txfPage.getText());
        setCurrentPage(inputIndex - 1);
        updateCurrentPageNumber();
      } catch (NumberFormatException ex) {
        OrchidUtils.msgError(this, OrchidLocale.getString("INVALID_PAGE_INDEX"));
      }
    }//GEN-LAST:event_txfPageKeyTyped

    private void cmbRateItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbRateItemStateChanged
      updatePrintCanvasPane(pageIndex);
    }//GEN-LAST:event_cmbRateItemStateChanged

    private void btnPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintActionPerformed
      try {
        doPrintTask(true);
      } catch (PaperSizeException ex) {
        if (ex.getCode() == PaperSizeException.PRINTER_PAPER_ERROR) {
          showPrinterPaperError();
        }
      } catch (Exception ex) {
        lbMessage.setMessage(ex.getMessage(), Type.MT_ERROR);
      }
    }//GEN-LAST:event_btnPrintActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
      Window window = SwingUtilities.getWindowAncestor(this);
      if (window != null) {
        window.dispatchEvent(new WindowEvent(window, WindowEvent.WINDOW_CLOSING));
      }
    }//GEN-LAST:event_btnExitActionPerformed
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton btnExit;
  private javax.swing.JButton btnNext;
  private javax.swing.JButton btnPrevious;
  private javax.swing.JButton btnPrint;
  private javax.swing.JButton btnSettings;
  private javax.swing.JComboBox cmbRate;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JToolBar.Separator jSeparator1;
  private javax.swing.JToolBar.Separator jSeparator2;
  private javax.swing.JToolBar.Separator jSeparator3;
  private javax.swing.JToolBar.Separator jSeparator4;
  private javax.swing.JToolBar jToolBar2;
  private com.xzq.osc.JocMessageLabel lbMessage;
  private javax.swing.JLabel lbPageCount;
  private javax.swing.JLabel lbPageIndex;
  private javax.swing.JLabel lbPrinter;
  private javax.swing.JPanel pnContainer;
  private javax.swing.JToolBar.Separator sptSettings;
  private javax.swing.JTextField txfPage;
  // End of variables declaration//GEN-END:variables
  protected MediaSizeName pageMediaSizeName;
  private int pageCount;
  private int pageIndex;
  private int printCount;
  private boolean strictPaperSize;
  private Mechanism mechanism;
  private PrinterJob printerJob;
  private PrintService printService;
  private List<PageableEx> pagesList;
  private AttributeSet attributeSet;

  //custom initialization
  private void customInitialize() {
    pagesList = new ArrayList<PageableEx>();
    attributeSet = new HashAttributeSet();
    printerJob = PrinterJob.getPrinterJob();
    mechanism = Mechanism.PrintService;
    printService = PrintServiceLookup.lookupDefaultPrintService();
    printCanvas = new PrintCanvasPane();
    pnContainer.add(printCanvas, new GridBagConstraints());
    updateCurrentPrinterLabel();
  }

  //show error when paper size faulty
  private void showPrinterPaperError() {
    PageFormat pf = pagesList.get(0).getPageFormat(0);
    int width = (int) Math.round(PrintUtils.PixelToMM(pf.getWidth()));
    int height = (int) Math.round(PrintUtils.PixelToMM(pf.getHeight()));
    OrchidUtils.msgWarn(this, OrchidLocale.
            getString("INVALID_PAPER_SIZE", width, height));
    btnSettings.doClick();
  }

  //update printer label
  private void updateCurrentPrinterLabel() {
    PrintService ps;
    if (mechanism == Mechanism.PrintService) {
      ps = printService;
    } else {
      ps = printerJob.getPrintService();
    }
    lbPrinter.setText(OrchidLocale.getString("PRINTER_TITLE", ps.getName()));
  }

  //update button state after checking print task list
  private void updateButtonState() {
    boolean enabled = pageCount > 0;
    btnPrevious.setEnabled(enabled);
    btnNext.setEnabled(enabled);
    txfPage.setEnabled(enabled);
    cmbRate.setEnabled(enabled);
    btnPrint.setEnabled(enabled);
    lbPageCount.setText(" / " + pageCount + " ");
    if (pageCount > 0) {
      pageIndex = -1;
      setCurrentPage(0);
    } else {
      throw new IllegalStateException(OrchidLocale.getString("NO_VALID_PRINT_CONTENT"));
    }
  }

  //set current page index
  private void setCurrentPage(int pageIndex) {
    if (pageIndex < 0) {
      pageIndex = 0;
    } else if (pageIndex >= pageCount) {
      pageIndex = pageCount - 1;
    }
    if (pageCount == 0 || pageIndex == this.pageIndex) {
      return;
    }
    this.pageIndex = pageIndex;
    updateCurrentPageNumber();
    btnPrevious.setEnabled(pageIndex > 0);
    btnNext.setEnabled(pageIndex < pageCount - 1);
    updatePrintCanvasPane(pageIndex);
  }

  //update current page number
  private void updateCurrentPageNumber() {
    txfPage.setText(String.valueOf(pageIndex + 1));
  }

  //refresh print canvas pane
  private void updatePrintCanvasPane(int pageIndex) {
    PageableEx page = getPageableEx(pageIndex);
    pageIndex = pageIndex - page.getStartPage();
    Printable painter = page.getPrintable(pageIndex);
    PageFormat pageFormat = page.getPageFormat(pageIndex);
    printCanvas.setPrintable(painter, pageFormat, pageIndex);
    resizePainterContainer(pageFormat);
    lbMessage.setMessage(OrchidLocale.getString("PRINT_JOB_NAME", page.getJobName()), Type.MT_IDLE);
  }

  //return PageableEx object by page index of total page count
  private PageableEx getPageableEx(int pageIndex) {
    for (PageableEx page : pagesList) {
      int start = page.getStartPage();
      int count = page.getPageCount();
      if (pageIndex >= start && pageIndex < start + count) {
        return page;
      }
    }
    return null;
  }

  //resize preview pane to fullfill content
  private void resizePainterContainer(PageFormat pf) {
    String text = cmbRate.getSelectedItem().toString();
    text = text.substring(0, text.length() - 1);
    double rate = Double.parseDouble(text) / 100;
    int width = (int) (pf.getWidth() * rate);
    int height = (int) (pf.getHeight() * rate);
    printCanvas.setPreferredSize(new Dimension(width, height));
    pnContainer.setSize(new Dimension(width + 20, height + 20));
    pnContainer.setPreferredSize(new Dimension(width + 20, height + 20));
    printCanvas.repaint();
  }

  // <editor-fold defaultstate="collapsed" desc="Printer Setting Relative...">
  /**
   * Display page option dialog with default page settings.
   *
   * @see #pageDialog(java.awt.print.PageFormat)
   */
  public PageFormat pageDialog() {
    return pageDialog(null);
  }

  /**
   * Display page option dialog with special page format.
   *
   * @see #pageDialog(PageFormat, MediaSizeName)
   */
  public PageFormat pageDialog(PageFormat pageFormat) {
    MediaSizeName sizeName = null;
    if (pageFormat != null) {
      float width = (float) PrintUtils.PixelToMM(pageFormat.getWidth());
      float height = (float) PrintUtils.PixelToMM(pageFormat.getHeight());
      sizeName = MediaSize.findMedia(width, height, MediaSize.MM);
    }
    return pageDialog(pageFormat, sizeName);
  }

  /**
   * Display page option dialog.<br> If currently using <b>Java 2D Print</b>
   * mechanism, then display dialog with pageFormat object specified
   * settings.<br> If currently using <b>Java Print Service</b> mechanism, then
   * display printer dialog with printer these support specified page format, or
   * display all printer if no any printer support specifed page format. If user
   * give an affirmative answer, then getPrintService and getPageMediaSizeName
   * function will return user selected printer and media.
   *
   * @param pageFormat page format
   * @param pageMediaSizeName paper media
   * @return user selected page format or null if user canceled dialog.
   * @see #getPrintService()
   * @see #getPageMediaSizeName()
   */
  public PageFormat pageDialog(PageFormat pageFormat,
          MediaSizeName pageMediaSizeName) {
    if (mechanism == Mechanism.PrinterJob) {
      if (pageFormat == null) {
        pageFormat = getPrinterJob().defaultPage();
      }
      PageFormat pf = getPrinterJob().pageDialog(pageFormat);
      return pf == pageFormat ? null : pf;
    }
    this.pageMediaSizeName = null;
    PrintService[] svs = PrintServiceLookup.lookupPrintServices(docFlavor, null);
    PrintRequestAttributeSet pras = new HashPrintRequestAttributeSet();
    if (pageMediaSizeName != null) {
      pras.add(pageMediaSizeName);
    }
    if (pageFormat != null) {
      parsePrintRequestAttributeSet(pras, pageFormat);
    }
    PrintService prts = printService;
    prts = ServiceUI.printDialog(null, -1, -1, svs, prts, null, pras);
    if (prts == null) {
      return null;
    } else {
      setPrintService(prts);
      return parsePrintRequestAttributeSet(pras);
    }
  }

  private void parsePrintRequestAttributeSet(
          PrintRequestAttributeSet pras, PageFormat pageFormat) {
    if (!pras.containsKey(Media.class)) {
      double width = Math.round(PrintUtils.PixelToMM(pageFormat.getWidth()));
      double height = Math.round(PrintUtils.PixelToMM(pageFormat.getHeight()));
      MediaSizeName sizeName = MediaSize.findMedia((float) width,
              (float) height, MediaSize.MM);
      if (sizeName != null) {
        pras.add(sizeName);
      }
    }
    OrientationRequested oria = OrientationRequested.PORTRAIT;
    if (pageFormat.getOrientation() == PageFormat.LANDSCAPE) {
      oria = OrientationRequested.LANDSCAPE;
    } else if (pageFormat.getOrientation() == PageFormat.REVERSE_LANDSCAPE) {
      oria = OrientationRequested.REVERSE_LANDSCAPE;
    }
    float x = (float) PrintUtils.PixelToMM(pageFormat.getImageableX());
    float y = (float) PrintUtils.PixelToMM(pageFormat.getImageableY());
    float w = (float) PrintUtils.PixelToMM(pageFormat.getImageableWidth());
    float h = (float) PrintUtils.PixelToMM(pageFormat.getImageableHeight());
    MediaPrintableArea mpaa = new MediaPrintableArea(x, y, w, h,
            MediaPrintableArea.MM);
    pras.add(oria);
    pras.add(mpaa);
  }

  private PageFormat parsePrintRequestAttributeSet(
          PrintRequestAttributeSet pras) {
    Attribute attr = pras.get(Media.class);
    if (attr != null && attr instanceof MediaSizeName) {
      pageMediaSizeName = (MediaSizeName) attr;
    }
    PageFormat pageFormat = null;
    if (pageMediaSizeName != null) {
      pageFormat = new PageFormat();
      Paper paper = new Paper();
      MediaSize size = MediaSize.getMediaSizeForName(pageMediaSizeName);
      paper.setSize(PrintUtils.MMtoPixel(size.getX(MediaSize.MM)),
              PrintUtils.MMtoPixel(size.getY(MediaSize.MM)));
      attr = pras.get(MediaPrintableArea.class);
      if (attr != null && attr instanceof MediaPrintableArea) {
        MediaPrintableArea mpa = (MediaPrintableArea) attr;
        double x = PrintUtils.MMtoPixel(mpa.getX(MediaSize.MM));
        double y = PrintUtils.MMtoPixel(mpa.getY(MediaSize.MM));
        double w = PrintUtils.MMtoPixel(mpa.getWidth(MediaSize.MM));
        double h = PrintUtils.MMtoPixel(mpa.getHeight(MediaSize.MM));
        paper.setImageableArea(x, y, w, h);
      }
      pageFormat.setPaper(paper);
      attr = pras.get(OrientationRequested.class);
      if (attr != null && attr instanceof OrientationRequested) {
        OrientationRequested oriq = (OrientationRequested) attr;
        if (oriq == OrientationRequested.LANDSCAPE) {
          pageFormat.setOrientation(PageFormat.LANDSCAPE);
        } else if (oriq == OrientationRequested.REVERSE_LANDSCAPE) {
          pageFormat.setOrientation(PageFormat.REVERSE_LANDSCAPE);
        } else {
          pageFormat.setOrientation(PageFormat.PORTRAIT);
        }
      }
    }
    return pageFormat;
  }

  /**
   * When using <b>Java Print Service</b> mechanism and user given an
   * affirmative answer in page dialog, returns user selected paper media, esle
   * return null.<br> When using <b>Java 2D Print</b> mechanism, this
   * function's action is undefined.
   *
   * @return paper media name
   */
  public MediaSizeName getPageMediaSizeName() {
    return pageMediaSizeName;
  }

  /**
   * Display print dialog use currently PrinterJob object. If user give an
   * affirmative answer, then getPrintService function will return user selected
   * printer.
   *
   * @return If user give an affirmative answer, return true, else return false.
   */
  public boolean printDialog2D() {
    if (printerJob.printDialog()) {
      updateCurrentPrinterLabel();
      return true;
    }
    return false;
  }

  /**
   * If use strait paper size check, return ture, else return false. if this
   * property is true, then check paper size before print and throw an error if
   * printer paper is not meet print job expect.<br> Note: if this property is
   * true, then should use same paper size for all print job in task list.
   *
   * @return true for use strait papger size check or false not.
   */
  public boolean getStrictPaperSize() {
    return strictPaperSize;
  }

  /**
   * Sets whether use strait paper size check or not.
   *
   * @param strictPaperSize true for use strait papger size check or false not.
   */
  public void setStrictPaperSize(boolean strictPaperSize) {
    this.strictPaperSize = strictPaperSize;
  }

  /**
   * Returns currently used print mechanism, Mechanism.PrinterJob or
   * Mechanism.PrintService.
   *
   * @return print mechanism
   */
  public Mechanism getMechanism() {

    return mechanism;
  }

  /**
   * Sets print mechanism.
   *
   * @param mechanism print mechanism.
   */
  public void setMechanism(Mechanism mechanism) {
    this.mechanism = mechanism;
    updateCurrentPrinterLabel();
  }

  /**
   * Returns current PrinterJob object.
   *
   * @return current PrinterJob object.
   */
  public PrinterJob getPrinterJob() {
    return printerJob;
  }

  /**
   * Sets current PrinterJob object.
   *
   * @param printerJob current PrinterJob object.
   * @exception IllegalArgumentException if parameter printerJob is null.
   */
  public void setPrinterJob(PrinterJob printerJob) {
    if (printerJob == null) {
      throw new IllegalArgumentException("Can not set null printerJob!");
    }
    this.printerJob = printerJob;
    updateCurrentPrinterLabel();
  }

  /**
   * Returns current print service object, for <b>Java 2D Print</b> mechanism,
   * this function return print service of PrinterJob object. print service
   * object may changed after user give an affirmative answer in page option
   * dialog.
   *
   * @return print service object.
   */
  public PrintService getPrintService() {
    if (mechanism == Mechanism.PrintService) {
      return printService;
    } else {
      return printerJob.getPrintService();
    }
  }

  /**
   * Sets current print service object. if currently use <b>Java 2D Print</b>
   * mechanism, set print service of PrinterJob object.
   *
   * @param printService print service object
   * @exception IllegalArgumentException if parameter printService is null of
   * printerJob.setPrintService throws PrinterException.
   */
  public void setPrintService(PrintService printService) {
    if (printService == null) {
      throw new IllegalArgumentException("Can not set null printService!");
    }
    if (mechanism == Mechanism.PrintService) {
      this.printService = printService;
    } else {
      try {
        printerJob.setPrintService(printService);
      } catch (PrinterException ex) {
        throw new IllegalArgumentException("Set printService failed!", ex);
      }
    }
    updateCurrentPrinterLabel();
  }
  // </editor-fold>

  // <editor-fold defaultstate="collapsed" desc="Manage Print Task Relative...">
  /**
   * Returns print attribute set.
   *
   * @return print attribute set.
   */
  public AttributeSet getAttributeSet() {
    return attributeSet;
  }

  /**
   * Sets print attribute set.
   *
   * @param attributeSet print attribute set.
   * @throws IllegalArgumentException if parameter attributeSet is null.
   */
  public void setAttributeSet(AttributeSet attributeSet) {
    if (attributeSet == null) {
      throw new IllegalArgumentException("Can not set null AttributeSet");
    }
    this.attributeSet = attributeSet;
  }

  /**
   * Add an one page print job to task list, same as call addPrintable(painter,
   * pf, 1, jobName)
   *
   * @see #addPrintable(Printable, PageFormat, int, String)
   */
  public Pageable addPrintable(Printable painter, PageFormat pf,
          String jobName) {
    return addPrintable(painter, pf, 1, jobName);
  }

  /**
   * Add print job to task list with speceified settings.
   *
   * @param painter printable object
   * @param pf page format
   * @param numPages page count
   * @param jobName print job name
   * @return Pageable object contains printable object.
   */
  public Pageable addPrintable(Printable painter, PageFormat pf,
          int numPages, String jobName) {
    Book book = new Book();
    book.append(painter, pf, numPages);
    pagesList.add(new PageableEx(book, jobName));
    return book;
  }

  /**
   * Add print job to task list through Pageable object and job name.
   *
   * @param pageable Pageable object
   * @param jobName print job name
   */
  public void addPageable(Pageable pageable, String jobName) {
    pagesList.add(new PageableEx(pageable, jobName));
  }

  /**
   * Returns print job count in task list by Pageable object separated.
   *
   * @return print job count.
   */
  public int getPageableCount() {
    return pagesList.size();
  }

  /**
   * Returns Pageable print job from index.
   *
   * @param index index from zero.
   * @return Pageable print job.
   */
  public Pageable getPageable(int index) {
    return pagesList.get(index).getPageable();
  }

  /**
   * Returns print job name from index.
   *
   * @param index index from zero.
   * @return print job name.
   */
  public String getJobName(int index) {
    return pagesList.get(index).getJobName();
  }

  /**
   * Remove Pageable print job from task list.
   *
   * @param pageable print job to remove.
   * @param firstOnly true for remove first Pageable object only, false remove
   * all Pageable object if it appear multi-times in task list.
   */
  public void removePageable(Pageable pageable, boolean firstOnly) {
    for (int i = pagesList.size() - 1; i >= 0; i--) {
      if (pagesList.get(i).getPageable() == pageable) {
        pagesList.remove(i);
        if (firstOnly) {
          break;
        }
      }
    }
  }

  /**
   * clear print task list.
   */
  public void clearAllPageable() {
    pagesList.clear();
  }
  // </editor-fold>

  //<editor-fold defaultstate="collapsed" desc="Preview and Print Relative...">
  /**
   * display print preview dialog.
   *
   * @param parent component to determine parent window.
   * @param showSettingButton true for show setting button or false hide.
   * @return total count of successful print
   * @exception IllegalStateException if print task list is empty.
   * @exception PaperSizeException if strait paper check actived and have
   * various paper size in task list.
   */
  public int preview(Component parent, boolean showSettingButton) {
    if (pagesList == null || pagesList.isEmpty()) {
      throw new IllegalStateException(OrchidLocale.getString("NO_VALID_PRINT_CONTENT"));
    }
    if (strictPaperSize && !singlePaperSize()) {
      throw new PaperSizeException(PaperSizeException.MULTI_PAPER_SIZE);
    }
    printCount = 0;
    btnSettings.setVisible(showSettingButton);
    sptSettings.setVisible(showSettingButton);
    SwingUtilities.invokeLater(new PagesListParser());//
    createPreviewDialog(parent).setVisible(true);
    return printCount;
  }

  //create dialog for preview
  private JDialog createPreviewDialog(Component parent) {
    Window window = OrchidUtils.getWindowOf(parent);
    JocModalDialog previewDialog = new JocModalDialog(window);
    previewDialog.setTitle(OrchidLocale.getString("PREVIEW_DIALOG_TITLE"));
    previewDialog.setContentPane(this);
    previewDialog.pack();
    previewDialog.setLocationRelativeTo(window);
    return previewDialog;
  }

  /**
   * send print task list to printer without display preview dialog.
   *
   * @return total count of successful print
   * @throws IllegalStateException if print task list if empty.
   * @throws PaperSizeException if strait paper check actived and have various
   * paper size in task list or printer paper not match print job expect.
   * @throws ExecutionException print worker execution exception
   * @throws InterruptedException print worker interrupted
   */
  public int print() throws IllegalStateException, PaperSizeException,
          ExecutionException, InterruptedException {
    doPrintTask(false);
    return printCount;
  }

  private void doPrintTask(boolean guiMode) throws IllegalStateException,
          PaperSizeException, ExecutionException, InterruptedException {
    if (pagesList == null || pagesList.isEmpty()) {
      throw new IllegalStateException(OrchidLocale.getString("NO_VALID_PRINT_CONTENT"));
    }
    if (strictPaperSize && !singlePaperSize()) {
      throw new PaperSizeException(PaperSizeException.MULTI_PAPER_SIZE);
    }
    if (strictPaperSize && !validPrinterPaper()) {
      throw new PaperSizeException(PaperSizeException.PRINTER_PAPER_ERROR);
    }
    PrintWorker printWorker = new PrintWorker(guiMode);
    printWorker.execute();
    if (!guiMode) {
      printWorker.get();
    }
  }

  //check if all print job use same paper size.
  private boolean singlePaperSize() {
    Paper paper = pagesList.get(0).getPageFormat(0).getPaper();
    for (PageableEx page : pagesList) {
      for (int i = 0; i < page.getPageable().getNumberOfPages(); i++) {
        if (!samePaperSize(paper, page.getPageFormat(i).getPaper())) {
          return false;
        }
      }
    }
    return true;
  }

  //check whether printer paper match print job expect or not.
  private boolean validPrinterPaper() {
    Paper paper = pagesList.get(0).getPageFormat(0).getPaper();
    if (mechanism == Mechanism.PrinterJob) {
      return samePaperSize(paper, printerJob.defaultPage().getPaper());
    } else {
      double mmX = Math.round(PrintUtils.PixelToMM(paper.getWidth()));
      double mmY = Math.round(PrintUtils.PixelToMM(paper.getHeight()));
      return PrintUtils.getSupportedMedia(printService, mmX, mmY,
              MediaSize.MM) != null;
    }
  }

  //return true if paper 2 is same as paper 1.
  private boolean samePaperSize(Paper paper1, Paper paper2) {
    double w1 = Math.round(PrintUtils.PixelToMM(paper1.getWidth()));
    double h1 = Math.round(PrintUtils.PixelToMM(paper1.getHeight()));
    double w2 = Math.round(PrintUtils.PixelToMM(paper2.getWidth()));
    double h2 = Math.round(PrintUtils.PixelToMM(paper2.getHeight()));
    return w1 == w2 && h1 == h2;
  }
  // </editor-fold>

  /**
   * Returns Orchid Component About Dialog.
   *
   * @return an about dialog
   */
  @Override
  public JDialog getAboutBox() {
    return DefaultOrchidAbout.getDefaultAboutBox(JocPrintPreview.class);
  }

  /**
   * Internal use.
   * @param  aboutBox about dialog
   */
  public void setAboutBox(JDialog aboutBox) {
    // not content need
  }

  private class PagesListParser extends SwingWorker<Object, PageableEx> {

    private Graphics graphics;
    private PageableEx currentPage;

    public PagesListParser() {
      graphics = new BufferedImage(1, 1, BufferedImage.TYPE_INT_RGB).createGraphics();
      lbMessage.setMessage(OrchidLocale.getString("INIT_CHECK_PRINT_TASK"), Type.MT_BUSY);
    }

    @Override
    protected Object doInBackground() throws Exception {
      //caculate actual page count.
      pageCount = 0;
      int index = 0, provideIndex = 0, provideCount = 0;
      for (PageableEx page : pagesList) {
        provideCount += page.getPageable().getNumberOfPages();
      }
      //start checking task
      PageableEx page = pagesList.get(index);
      page.setPageCount(0);
      page.setStartPage(pageCount);
      while (provideIndex < provideCount) {
        if (hasMorePage(page, pageCount)) {
          pageCount++;
          provideIndex++;
          page.incPageCount();
        } else {
          provideIndex -= page.getPageCount();
          provideIndex += page.getPageable().getNumberOfPages();
          if (++index < pagesList.size()) {
            page = pagesList.get(index);
            page.setPageCount(0);
            page.setStartPage(pageCount);
          }
        }
        publish(page);
      }
      return null;
    }

    private boolean hasMorePage(PageableEx page, int pageIndex)
            throws PrinterException {
      pageIndex -= page.getStartPage();
      if (pageIndex >= page.getPageable().getNumberOfPages()) {
        return false;
      }
      Printable pt = page.getPrintable(pageIndex);
      PageFormat pf = page.getPageFormat(pageIndex);
      return pt.print(graphics, pf, pageIndex) == Printable.PAGE_EXISTS;
    }

    @Override
    protected void process(List<PageableEx> chunks) {
      PageableEx page = chunks.get(chunks.size() - 1);
      if (page != currentPage && !isDone()) {
        currentPage = page;
        lbMessage.setMessage(OrchidLocale.getString(
                "CHECKING_PRINT_JOB", page.getJobName()), Type.MT_BUSY);
      }
    }

    @Override
    protected void done() {
      graphics.dispose();
      try {
        get();
        updateButtonState();
        lbMessage.setMessage(OrchidLocale.getString("DONE_CHECK_PRINT_TASK"), Type.MT_OK);
      } catch (Exception ex) {
        pageCount = 0;
        lbMessage.setMessage(OrchidLocale.getString("FAIL_CHECK_PRINT_TASK") + ex.getMessage(), Type.MT_ERROR);
      }
    }
  }

  private class PrintWorker extends SwingWorker<Object, PageableEx> {

    private boolean guiMode;
    private DocAttributeSet daset;
    private PrintRequestAttributeSet paset;

    public PrintWorker(boolean guiMode) {
      this.guiMode = guiMode;
      daset = PrintUtils.getDocAttributeSet(attributeSet);
      paset = PrintUtils.getPrintRequestAttributeSet(attributeSet);
      if (strictPaperSize && mechanism == Mechanism.PrintService) {
        updateMediaSizeNameAttribute();
      }
      lbMessage.setMessage(OrchidLocale.getString("START_SEND_PRINTER"), Type.MT_BUSY);
    }

    //correct media size name to match printer paper settings
    private void updateMediaSizeNameAttribute() {
      PageFormat pf = pagesList.get(0).getPageFormat(0);
      double width = Math.round(PrintUtils.PixelToMM(pf.getWidth()));
      double height = Math.round(PrintUtils.PixelToMM(pf.getHeight()));
      MediaSizeName sizeName = PrintUtils.getSupportedMedia(printService,
              width, height, MediaSize.MM);
      if (sizeName != null) {
        paset.add(sizeName);
      }
    }

    @Override
    protected Object doInBackground() throws Exception {
      for (PageableEx page : pagesList) {
        if (page.getPageCount() > 0) {
          printPageableEx(page);
        }
      }
      return null;
    }

    private void printPageableEx(PageableEx page)
            throws PrinterException, PrintException {
      if (guiMode) {
        publish(page);
      }
      if (mechanism == Mechanism.PrinterJob) {
        printUsingPrinterJob(page);
      } else {
        printUsingPrintService(page);
      }
    }

    // use Java 2D print mechanism
    private void printUsingPrinterJob(PageableEx page)
            throws PrinterException {
      paset.add(getMediaArea(page.getPageFormat(0)));
      printerJob.setJobName(page.getJobName());
      printerJob.setPageable(page.getPageable());
      printerJob.print(paset);
    }

    private MediaPrintableArea getMediaArea(PageFormat pageFormat) {
      float x = (float) PrintUtils.PixelToMM(pageFormat.getImageableX());
      float y = (float) PrintUtils.PixelToMM(pageFormat.getImageableY());
      float w = (float) PrintUtils.PixelToMM(pageFormat.getImageableWidth());
      float h = (float) PrintUtils.PixelToMM(pageFormat.getImageableHeight());
      return new MediaPrintableArea(x, y, w, h, MediaSize.MM);
    }

    // use java print service
    private void printUsingPrintService(PageableEx page)
            throws PrintException {
      paset.add(new JobName(page.getJobName(), null));
      SimpleDoc doc = new SimpleDoc(page.getPageable(), docFlavor, daset);
      printService.createPrintJob().print(doc, paset);
    }

    @Override
    protected void process(List<PageableEx> chunks) {
      PageableEx page = chunks.get(chunks.size() - 1);
      lbMessage.setMessage(OrchidLocale.getString(
              "SENDING_PRINT_JOB", page.getJobName()), Type.MT_BUSY);
    }

    @Override
    protected void done() {
      if (guiMode) {
        try {
          get();
          printCount++;
          lbMessage.setMessage(OrchidLocale.getString("SEND_PRINTER_DONE"), Type.MT_OK);
        } catch (Exception ex) {
          lbMessage.setMessage(OrchidLocale.getString("SEND_PRINTER_ABORT") + ex.getMessage(), Type.MT_ERROR);
        }
      }
    }
  }

  private static class PageableEx {

    private String jobName;
    private Pageable painter;
    private int startPage;
    private int pageCount;

    /**
     * Constructor for PageableEx, default start page index is 0.
     *
     * @param painter Pageable object
     * @param jobName print job name
     * @throws NullPointerException if parameter painter is null.
     */
    public PageableEx(Pageable painter, String jobName) {
      this.jobName = jobName;
      this.painter = painter;
      this.startPage = 0;
      this.pageCount = painter.getNumberOfPages();
    }

    /**
     * Returns Pageable object associate with this container
     *
     * @return Pageable object
     */
    public Pageable getPageable() {
      return painter;
    }

    /**
     * Returns print job name.
     *
     * @return print job name or resource string <CODE>UNNAMED_PRINT_JOB</CODE>
     * if job name is unspecified.
     */
    public String getJobName() {
      if (jobName != null && !jobName.isEmpty()) {
        return jobName;
      } else {
        return "Unnamed Print Job";
      }
    }

    /**
     * Returns first print page index, defaults is 0.
     *
     * @return first print page index
     */
    public int getStartPage() {
      return startPage;
    }

    /**
     * Set first print page index.
     *
     * @param startPage first print page index.
     */
    public void setStartPage(int startPage) {
      this.startPage = startPage;
    }

    /**
     * Returns count of page to print, defaults is page count in associated
     * Pageable object.
     *
     * @return count of page to print.
     */
    public int getPageCount() {
      return pageCount;
    }

    /**
     * plus 1 to count of page to print.
     */
    public void incPageCount() {
      this.pageCount++;
    }

    /**
     * Set count of page to print.
     *
     * @param pageCount
     */
    public void setPageCount(int pageCount) {
      this.pageCount = pageCount;
    }

    public Printable getPrintable(int pageIndex) {
      return painter.getPrintable(pageIndex);
    }

    public PageFormat getPageFormat(int pageIndex) {
      return painter.getPageFormat(pageIndex);
    }
  }

  public class PrintCanvasPane extends JComponent {

    private Printable painter;
    private PageFormat pageFormat;
    private int pageIndex;

    public void setPrintable(Printable painter, PageFormat pageFormat,
            int pageIndex) {
      this.painter = painter;
      this.pageFormat = pageFormat;
      this.pageIndex = pageIndex;
    }

    public Printable getPrintable() {
      return painter;
    }

    public PageFormat getPageFormat() {
      return pageFormat;
    }

    public int getPageIndex() {
      return pageIndex;
    }

    @Override
    protected void paintComponent(Graphics g) {
      Insets insets = getInsets();
      int width = getWidth() - insets.left - insets.right;
      int height = getHeight() - insets.top - insets.bottom;
      BufferedImage cacheImage = new BufferedImage(
              width, height, BufferedImage.TYPE_INT_RGB);
      Graphics2D cg = cacheImage.createGraphics();
      Rectangle rect = new Rectangle(insets.left, insets.top, width, height);
      clearCanvasPane(cg, rect);
      if (painter != null && pageFormat != null) {
        paintPrintable(cg, rect);
      }
      cg.dispose();
      g.drawImage(cacheImage, insets.left, insets.top, this);
    }

    private void clearCanvasPane(Graphics2D g2, Rectangle rect) {
      Paint old = g2.getPaint();
      g2.setPaint(Color.WHITE);
      g2.fill(rect);
      g2.setPaint(Color.LIGHT_GRAY);
      g2.draw(rect);
      g2.setPaint(old);
    }

    private void paintPrintable(Graphics2D g2, Rectangle rect) {
      try {
        double scale;
        if (pageFormat.getWidth() > pageFormat.getHeight()) {
          scale = rect.getWidth() / pageFormat.getWidth();
        } else {
          scale = rect.getHeight() / pageFormat.getHeight();
        }
        g2.scale(scale, scale);
        painter.print(g2, pageFormat, pageIndex);
      } catch (PrinterException ex) {
        OrchidLogger.warning("paint printable", ex);
        g2.draw(new Line2D.Float(0, 0, rect.width, rect.height));
        g2.draw(new Line2D.Double(rect.width, 0, 0, rect.height));
      }
    }
  }
}
