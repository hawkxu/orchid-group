/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.xzq.osc.editors;

import com.xzq.osc.BeanInfoResource;
import com.xzq.osc.CharCase;
import com.xzq.osc.JocInputMask;
import com.xzq.osc.JocValueField;
import com.xzq.osc.field.AbstractRangeModel;
import com.xzq.osc.field.DateRangeModel;
import com.xzq.osc.field.FileRangeModel;
import com.xzq.osc.field.GenericRangeModel;
import com.xzq.osc.field.ListValuePicker;
import com.xzq.osc.field.NumberRangeModel;
import com.xzq.osc.field.NumberTypeUtils;
import com.xzq.osc.field.RangeEditorPane;
import com.xzq.osc.field.RangeModel;
import com.xzq.osc.field.StringRangeModel;
import com.xzq.osc.field.TimeRangeModel;
import com.xzq.osc.field.ValuePickEntry;
import java.awt.Color;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.AbstractListModel;
import javax.swing.DefaultListCellRenderer;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JScrollPane;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 *
 * @author zqxu
 */
public class RangeModelPane extends javax.swing.JPanel {

  private static final List<Class> modelList = Arrays.asList(
          new Class[]{
            StringRangeModel.class,
            DateRangeModel.class,
            TimeRangeModel.class,
            NumberRangeModel.class,
            FileRangeModel.class,
            GenericRangeModel.class
          });

  /**
   * Creates new form RangeModelPane
   */
  public RangeModelPane() {
    initComponents();
    customInitialize();
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    rangeMask = new JocInputMask();
    jScrollPane1 = new JScrollPane();
    lstModelType = new JList();
    ckbAutoTrim = new JCheckBox();
    vlfPattern = new JocValueField();
    lbPattern = new JLabel();
    lbDefaultMask = new JLabel();
    vlfDefaultMask = new JocValueField();
    lbDefaultCase = new JLabel();
    vlfDefaultCase = new JocValueField();
    vlfRealType = new JocValueField();
    lbRealType = new JLabel();
    lbUnsupported = new JLabel();
    lbUnsupportedModel = new JLabel();
    rangeEditorPane = new RangeEditorPane();
    ckbMultiple = new JCheckBox();
    ckbInterval = new JCheckBox();

    lstModelType.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    lstModelType.addListSelectionListener(new ListSelectionListener() {
      public void valueChanged(ListSelectionEvent evt) {
        lstModelTypeValueChanged(evt);
      }
    });
    jScrollPane1.setViewportView(lstModelType);

    ckbAutoTrim.setText(BeanInfoResource.getString("AUTO_TRIM_LABEL")); // NOI18N

    vlfPattern.setColumns(25);
    vlfPattern.addPropertyChangeListener(new PropertyChangeListener() {
      public void propertyChange(PropertyChangeEvent evt) {
        vlfPatternPropertyChange(evt);
      }
    });

    lbPattern.setText(BeanInfoResource.getString("NUMBER_PATTERN_LABEL")); // NOI18N

    lbDefaultMask.setText(BeanInfoResource.getString("DEFAULT_MASK_LABEL")); // NOI18N

    vlfDefaultMask.setColumns(25);
    vlfDefaultMask.addPropertyChangeListener(new PropertyChangeListener() {
      public void propertyChange(PropertyChangeEvent evt) {
        vlfDefaultMaskPropertyChange(evt);
      }
    });

    lbDefaultCase.setText(BeanInfoResource.getString("DEFAULT_CASE_LABEL")); // NOI18N

    vlfDefaultCase.setColumns(25);
    vlfDefaultCase.addPropertyChangeListener(new PropertyChangeListener() {
      public void propertyChange(PropertyChangeEvent evt) {
        vlfDefaultCasePropertyChange(evt);
      }
    });

    vlfRealType.setColumns(25);
    vlfRealType.addPropertyChangeListener(new PropertyChangeListener() {
      public void propertyChange(PropertyChangeEvent evt) {
        vlfRealTypePropertyChange(evt);
      }
    });

    lbRealType.setText(BeanInfoResource.getString("NUMBER_TYPE_LABEL")); // NOI18N

    lbUnsupported.setForeground(Color.red);
    lbUnsupported.setText(BeanInfoResource.getString("UNSUPPORTED_MODEL")); // NOI18N

    lbUnsupportedModel.setForeground(Color.red);
    lbUnsupportedModel.setText("jLabel2");

    ckbMultiple.setText(BeanInfoResource.getString("MULTIPLE_RANGE_TEXT")); // NOI18N
    ckbMultiple.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        ckbMultipleActionPerformed(evt);
      }
    });

    ckbInterval.setText(BeanInfoResource.getString("RANGE_INTERVAL_TEXT")); // NOI18N
    ckbInterval.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        ckbIntervalActionPerformed(evt);
      }
    });

    GroupLayout layout = new GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(Alignment.LEADING, false)
          .addComponent(rangeEditorPane, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addGroup(layout.createSequentialGroup()
            .addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 140, GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(ComponentPlacement.UNRELATED)
            .addGroup(layout.createParallelGroup(Alignment.LEADING)
              .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(Alignment.LEADING)
                  .addComponent(lbPattern)
                  .addComponent(lbRealType)
                  .addComponent(lbDefaultMask)
                  .addComponent(lbDefaultCase))
                .addPreferredGap(ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(Alignment.LEADING)
                  .addComponent(vlfRealType, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                  .addComponent(vlfPattern, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                  .addComponent(ckbAutoTrim)
                  .addComponent(ckbMultiple)
                  .addComponent(ckbInterval)
                  .addComponent(vlfDefaultMask, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                  .addComponent(vlfDefaultCase, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
              .addComponent(lbUnsupported)
              .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(lbUnsupportedModel)))))
        .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(Alignment.LEADING, false)
          .addGroup(layout.createSequentialGroup()
            .addComponent(ckbAutoTrim)
            .addPreferredGap(ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(Alignment.BASELINE)
              .addComponent(lbPattern)
              .addComponent(vlfPattern, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(Alignment.BASELINE)
              .addComponent(lbRealType)
              .addComponent(vlfRealType, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(ComponentPlacement.RELATED)
            .addComponent(ckbMultiple)
            .addPreferredGap(ComponentPlacement.RELATED)
            .addComponent(ckbInterval)
            .addPreferredGap(ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(Alignment.BASELINE)
              .addComponent(vlfDefaultMask, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
              .addComponent(lbDefaultMask))
            .addPreferredGap(ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(Alignment.BASELINE)
              .addComponent(vlfDefaultCase, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
              .addComponent(lbDefaultCase))
            .addPreferredGap(ComponentPlacement.RELATED)
            .addComponent(lbUnsupported)
            .addPreferredGap(ComponentPlacement.RELATED)
            .addComponent(lbUnsupportedModel))
          .addComponent(jScrollPane1))
        .addPreferredGap(ComponentPlacement.RELATED)
        .addComponent(rangeEditorPane, GroupLayout.DEFAULT_SIZE, 206, Short.MAX_VALUE)
        .addContainerGap())
    );
  }// </editor-fold>//GEN-END:initComponents

  private void lstModelTypeValueChanged(ListSelectionEvent evt) {//GEN-FIRST:event_lstModelTypeValueChanged
    if (!evt.getValueIsAdjusting()) {
      updateCurrentRangeModel(lstModelType.getSelectedIndex());
    }
  }//GEN-LAST:event_lstModelTypeValueChanged

  private void vlfPatternPropertyChange(PropertyChangeEvent evt) {//GEN-FIRST:event_vlfPatternPropertyChange
    if (ignoreFieldChange || !evt.getPropertyName().equals("value")) {
      return;
    }
    String pattern = (String) evt.getNewValue();
    if (pattern != null && pattern.isEmpty()) {
      pattern = null;
    }
    if (rangeModel instanceof DateRangeModel) {
      ((DateRangeModel) rangeModel).setPattern(pattern);
    } else if (rangeModel instanceof NumberRangeModel) {
      ((NumberRangeModel) rangeModel).setPattern(pattern);
    }
  }//GEN-LAST:event_vlfPatternPropertyChange

  private void vlfDefaultMaskPropertyChange(PropertyChangeEvent evt) {//GEN-FIRST:event_vlfDefaultMaskPropertyChange
    if (ignoreFieldChange || !evt.getPropertyName().equals("value")) {
      return;
    }
    String mask = (String) evt.getNewValue();
    if (mask != null && mask.isEmpty()) {
      mask = null;
    }
    rangeMask.setMask(mask);
    if (rangeModel instanceof AbstractRangeModel) {
      ((AbstractRangeModel) rangeModel).setDefaultMask(mask);
    }
  }//GEN-LAST:event_vlfDefaultMaskPropertyChange

  private void vlfDefaultCasePropertyChange(PropertyChangeEvent evt) {//GEN-FIRST:event_vlfDefaultCasePropertyChange
    if (ignoreFieldChange || !evt.getPropertyName().equals("value")) {
      return;
    }
    CharCase charCase = (CharCase) evt.getNewValue();
    rangeMask.setCharCase(charCase);
    if (rangeModel instanceof AbstractRangeModel) {
      ((AbstractRangeModel) rangeModel).setDefaultCase(charCase);
    }
  }//GEN-LAST:event_vlfDefaultCasePropertyChange

  @SuppressWarnings("unchecked")
  private void vlfRealTypePropertyChange(PropertyChangeEvent evt) {//GEN-FIRST:event_vlfRealTypePropertyChange
    if (ignoreFieldChange || !evt.getPropertyName().equals("value")) {
      return;
    }
    if (rangeModel instanceof NumberRangeModel) {
      ((NumberRangeModel) rangeModel).setNumberType(
              (Class<? extends Number>) evt.getNewValue());
      updateFieldValue(rangeModel);
    }
  }//GEN-LAST:event_vlfRealTypePropertyChange

  @SuppressWarnings("unchecked")
  private void ckbMultipleActionPerformed(ActionEvent evt) {//GEN-FIRST:event_ckbMultipleActionPerformed
    if (ignoreFieldChange) {
      return;
    }
    AbstractRangeModel model = (AbstractRangeModel) rangeModel;
    model.setWholeRanges(rangeEditorPane.getWholeRanges());
    model.setMultipleRange(ckbMultiple.isSelected());
    updateEditorPane(rangeModel);
  }//GEN-LAST:event_ckbMultipleActionPerformed

  @SuppressWarnings("unchecked")
  private void ckbIntervalActionPerformed(ActionEvent evt) {//GEN-FIRST:event_ckbIntervalActionPerformed
    if (ignoreFieldChange) {
      return;
    }
    AbstractRangeModel model = (AbstractRangeModel) rangeModel;
    model.setWholeRanges(rangeEditorPane.getWholeRanges());
    model.setRangeInterval(ckbInterval.isSelected());
    updateEditorPane(rangeModel);
  }//GEN-LAST:event_ckbIntervalActionPerformed
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private JCheckBox ckbAutoTrim;
  private JCheckBox ckbInterval;
  private JCheckBox ckbMultiple;
  private JScrollPane jScrollPane1;
  private JLabel lbDefaultCase;
  private JLabel lbDefaultMask;
  private JLabel lbPattern;
  private JLabel lbRealType;
  private JLabel lbUnsupported;
  private JLabel lbUnsupportedModel;
  private JList lstModelType;
  private RangeEditorPane rangeEditorPane;
  private JocInputMask rangeMask;
  private JocValueField vlfDefaultCase;
  private JocValueField vlfDefaultMask;
  private JocValueField vlfPattern;
  private JocValueField vlfRealType;
  // End of variables declaration//GEN-END:variables
  private RangeModel rangeModel;
  private Map<Class, RangeModel> modelMap;
  private boolean ignoreFieldChange;

  private void customInitialize() {
    modelMap = new HashMap<Class, RangeModel>();
    lstModelType.setModel(new RangeModelModel());
    lstModelType.setCellRenderer(new ClassRenderer());
    vlfRealType.setModel(new ClassValueModel());
    vlfRealType.setValuePicker(ListValuePicker.from(
            (Object[]) NumberTypeUtils.supportedTypes));
    vlfDefaultMask.setModel(new MaskValueModel());
    vlfDefaultCase.setModel(new CharCaseValueModel());
    List<CharCase> caseList = new ArrayList<CharCase>();
    caseList.add(null);
    caseList.addAll(Arrays.asList(CharCase.values()));
    vlfDefaultCase.setValuePicker(ListValuePicker.from(
            (Object[]) caseList.toArray()));
    lbUnsupported.setVisible(false);
    lbUnsupportedModel.setVisible(false);
    rangeEditorPane.getActionButton(
            RangeEditorPane.BUTTON_OK).setVisible(false);
  }

  @SuppressWarnings("unchecked")
  public RangeModel getRangeModel() {
    if (lstModelType.getSelectedIndex() != -1) {
      rangeModel.setWholeRanges(rangeEditorPane.getWholeRanges());
    }
    return rangeModel;
  }

  public void setRangeModel(RangeModel rangeModel) {
    if (rangeModel == null) {
      rangeModel = new StringRangeModel();
    }
    this.rangeModel = rangeModel;
    Class modelClass = rangeModel.getClass();
    int modelIndex = modelList.indexOf(modelClass);
    lbUnsupported.setVisible(modelIndex == -1);
    lbUnsupportedModel.setVisible(modelIndex == -1);
    if (modelIndex != -1) {
      modelMap.put(modelClass, rangeModel.clone());
    }
    if (modelIndex == lstModelType.getSelectedIndex()) {
      updateCurrentRangeModel(modelIndex);
    } else {
      lstModelType.setSelectedIndex(modelIndex);
    }
    lbUnsupportedModel.setText(modelClass.getName());
  }

  private void updateCurrentRangeModel(int modelIndex) {
    if (modelIndex != -1) {
      Class modelClass = modelList.get(modelIndex);
      RangeModel model = modelMap.get(modelClass);
      if (model == null) {
        try {
          model = (RangeModel) modelClass.newInstance();
          modelMap.put(modelClass, model);
        } catch (Exception ex) {
          throw new RuntimeException(ex);
        }
      }
      rangeModel = model;
    }
    updateFieldState(modelIndex);
  }

  private void updateFieldState(int modelIndex) {
    updateFieldValue(rangeModel);
    Class modelClass = null;
    if (modelIndex != -1) {
      modelClass = modelList.get(modelIndex);
    }
    updateFieldEnabled(modelClass);
    updateFieldLabelText(modelClass);
  }

  private void updateFieldValue(RangeModel rangeModel) {
    ignoreFieldChange = true;
    ckbMultiple.setSelected(rangeModel.getMultipleRange());
    ckbInterval.setSelected(rangeModel.getRangeInterval());
    rangeMask.setMask(rangeModel.getDefaultMask());
    vlfDefaultMask.setValue(rangeModel.getDefaultMask());
    rangeMask.setCharCase(rangeModel.getDefaultCase());
    vlfDefaultCase.setValue(rangeModel.getDefaultCase());
    if (rangeModel instanceof StringRangeModel) {
      ckbAutoTrim.setSelected(((StringRangeModel) rangeModel).isAutoTrim());
    } else if (rangeModel instanceof DateRangeModel) {
      vlfPattern.setValue(((DateRangeModel) rangeModel).getPattern());
    } else if (rangeModel instanceof NumberRangeModel) {
      vlfPattern.setValue(((NumberRangeModel) rangeModel).getPattern());
      vlfRealType.setValue(((NumberRangeModel) rangeModel).getNumberType());
    }
    updateEditorPane(rangeModel);
    ignoreFieldChange = false;
  }

  private void updateEditorPane(RangeModel rangeModel) {
    Class rClass = rangeModel.getClass();
    rangeEditorPane.updateEditorPane(rangeModel, rangeMask,
            rClass != TimeRangeModel.class, null, null, null);
  }

  private void updateFieldEnabled(Class modelClass) {
    ckbAutoTrim.setEnabled(modelClass == StringRangeModel.class);
    vlfPattern.setEnabled(modelClass == DateRangeModel.class
            || modelClass == TimeRangeModel.class
            || modelClass == NumberRangeModel.class);
    lbPattern.setEnabled(vlfPattern.isEnabled());
    vlfRealType.setEnabled(modelClass == NumberRangeModel.class);
    lbRealType.setEnabled(vlfRealType.isEnabled());
    ckbMultiple.setEnabled(modelClass != null);
    ckbInterval.setEnabled(modelClass != null);
    vlfDefaultMask.setEnabled(modelClass != null);
    lbDefaultMask.setEnabled(vlfDefaultMask.isEnabled());
    vlfDefaultCase.setEnabled(modelClass != null);
    lbDefaultCase.setEnabled(vlfDefaultCase.isEnabled());
    rangeEditorPane.setEnabled(modelClass != null);
  }

  private void updateFieldLabelText(Class modelClass) {
    if (modelClass == DateRangeModel.class) {
      lbPattern.setText(BeanInfoResource.getString("DATE_PATTERN_LABEL"));
    } else if (modelClass == TimeRangeModel.class) {
      lbPattern.setText(BeanInfoResource.getString("TIME_PATTERN_LABEL"));
    } else if (modelClass == NumberRangeModel.class) {
      lbPattern.setText(BeanInfoResource.getString("NUMBER_PATTERN_LABEL"));
    }
  }

  private static class RangeModelModel extends AbstractListModel {

    @Override
    public int getSize() {
      return modelList.size();
    }

    @Override
    public Object getElementAt(int index) {
      return modelList.get(index);
    }
  }

  private static class ClassRenderer extends DefaultListCellRenderer {

    @Override
    public Component getListCellRendererComponent(JList list, Object value,
            int index, boolean isSelected, boolean cellHasFocus) {
      Component rendererComponent = super.getListCellRendererComponent(
              list, value, index, isSelected, cellHasFocus);
      setText(((Class) value).getSimpleName());
      return rendererComponent;
    }
  }
}
