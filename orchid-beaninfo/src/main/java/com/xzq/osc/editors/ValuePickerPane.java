/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.xzq.osc.editors;

import com.xzq.osc.BeanInfoResource;
import com.xzq.osc.OrchidUtils;
import com.xzq.osc.field.DateValueModel;
import com.xzq.osc.field.ListValuePicker;
import com.xzq.osc.field.NumberValueModel;
import com.xzq.osc.field.StringValueModel;
import com.xzq.osc.field.ValueModel;
import com.xzq.osc.field.ValuePickEntry;
import com.xzq.osc.field.ValuePicker;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.swing.DefaultComboBoxModel;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author zqxu
 */
public class ValuePickerPane extends javax.swing.JPanel {

  private static final Map<Object, ValueModel> valueModelMap =
          new AbstractMap<Object, ValueModel>() {
    private Set<Map.Entry<Object, ValueModel>> entries;

    {
      entries = new HashSet<Map.Entry<Object, ValueModel>>();
      entries.add(new SimpleEntry<Object, ValueModel>(
              String.class, new StringValueModel()));
      entries.add(new SimpleEntry<Object, ValueModel>(
              Date.class, new DateValueModel()));
      entries.add(new SimpleEntry<Object, ValueModel>(
              Byte.class, new NumberValueModel(Byte.class)));
      entries.add(new SimpleEntry<Object, ValueModel>(
              Short.class, new NumberValueModel(Short.class)));
      entries.add(new SimpleEntry<Object, ValueModel>(
              Integer.class, new NumberValueModel(Integer.class)));
      entries.add(new SimpleEntry<Object, ValueModel>(
              Long.class, new NumberValueModel(Long.class)));
      entries.add(new SimpleEntry<Object, ValueModel>(
              Float.class, new NumberValueModel(Float.class)));
      entries.add(new SimpleEntry<Object, ValueModel>(
              Double.class, new NumberValueModel(Double.class)));
      entries.add(new SimpleEntry<Object, ValueModel>(
              BigInteger.class, new NumberValueModel(BigInteger.class)));
      entries.add(new SimpleEntry<Object, ValueModel>(
              BigDecimal.class, new NumberValueModel(BigDecimal.class)));
    }

    @Override
    public Set<Map.Entry<Object, ValueModel>> entrySet() {
      return entries;
    }
  };

  /**
   * Creates new form ValuePickerPane
   */
  public ValuePickerPane() {
    initComponents();
    customInitialize();
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    cedKeyValue = new com.xzq.osc.JocTableCellEditor();
    vlfKeyValue = new com.xzq.osc.JocValueField();
    cedDisplayText = new com.xzq.osc.JocTableCellEditor();
    jToolBar1 = new javax.swing.JToolBar();
    btnAdd = new javax.swing.JButton();
    btnDelete = new javax.swing.JButton();
    lbWarning = new javax.swing.JLabel();
    jScrollPane1 = new javax.swing.JScrollPane();
    tbVList = new javax.swing.JTable();
    jLabel1 = new javax.swing.JLabel();
    cmbKeyValueClass = new javax.swing.JComboBox();
    jLabel2 = new javax.swing.JLabel();
    cmbDisplayFormat = new javax.swing.JComboBox();

    cedKeyValue.setClickCountToStart(1);
    cedKeyValue.setEditorComponent(vlfKeyValue);

    vlfKeyValue.setText("jocValueField1");

    cedDisplayText.setClickCountToStart(1);

    jToolBar1.setFloatable(false);
    jToolBar1.setRollover(true);

    btnAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/xzq/osc/img/plus.png"))); // NOI18N
    btnAdd.setFocusable(false);
    btnAdd.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    btnAdd.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    btnAdd.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btnAddActionPerformed(evt);
      }
    });
    jToolBar1.add(btnAdd);

    btnDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/xzq/osc/img/minus.png"))); // NOI18N
    btnDelete.setFocusable(false);
    btnDelete.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    btnDelete.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    btnDelete.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btnDeleteActionPerformed(evt);
      }
    });
    jToolBar1.add(btnDelete);

    lbWarning.setForeground(new java.awt.Color(0, 0, 204));
    lbWarning.setText(BeanInfoResource.getString("TIP_ONLY_LIST_PICKER")); // NOI18N

    tbVList.setModel(new javax.swing.table.DefaultTableModel(
      new Object [][] {
        {null, null, null, null},
        {null, null, null, null},
        {null, null, null, null},
        {null, null, null, null}
      },
      new String [] {
        "Title 1", "Title 2", "Title 3", "Title 4"
      }
    ));
    jScrollPane1.setViewportView(tbVList);

    jLabel1.setText(BeanInfoResource.getString("KEY_VALUE_CLASS_LABEL")); // NOI18N

    cmbKeyValueClass.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        cmbKeyValueClassActionPerformed(evt);
      }
    });

    jLabel2.setText(BeanInfoResource.getString("DISPLAY_FORMAT_LABEL")); // NOI18N

    cmbDisplayFormat.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "UI Defaults", "Key only", "Text only", "Key and Text" }));

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jLabel1)
          .addComponent(jLabel2))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(cmbKeyValueClass, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addGroup(layout.createSequentialGroup()
            .addComponent(cmbDisplayFormat, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(0, 0, Short.MAX_VALUE)))
        .addContainerGap())
      .addGroup(layout.createSequentialGroup()
        .addGap(10, 10, 10)
        .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addGap(335, 335, 335))
      .addGroup(layout.createSequentialGroup()
        .addGap(10, 10, 10)
        .addComponent(lbWarning, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      .addGroup(layout.createSequentialGroup()
        .addGap(10, 10, 10)
        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        .addGap(10, 10, 10))
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(lbWarning)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel2)
          .addComponent(cmbDisplayFormat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel1)
          .addComponent(cmbKeyValueClass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 252, Short.MAX_VALUE)
        .addContainerGap())
    );
  }// </editor-fold>//GEN-END:initComponents

  private void cmbKeyValueClassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbKeyValueClassActionPerformed
    Object keyValueClass = cmbKeyValueClass.getSelectedItem();
    vlfKeyValue.setModel(valueModelMap.get(keyValueClass));
    listPickerModel.setKeyValueClass((Class) keyValueClass);
  }//GEN-LAST:event_cmbKeyValueClassActionPerformed

  private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
    listPickerModel.appendRow();
  }//GEN-LAST:event_btnAddActionPerformed

  private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
    int[] selected = tbVList.getSelectedRows();
    for (int i = selected.length - 1; i >= 0; i--) {
      listPickerModel.removeRow(selected[i]);
    }
  }//GEN-LAST:event_btnDeleteActionPerformed
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton btnAdd;
  private javax.swing.JButton btnDelete;
  private com.xzq.osc.JocTableCellEditor cedDisplayText;
  private com.xzq.osc.JocTableCellEditor cedKeyValue;
  private javax.swing.JComboBox cmbDisplayFormat;
  private javax.swing.JComboBox cmbKeyValueClass;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JToolBar jToolBar1;
  private javax.swing.JLabel lbWarning;
  private javax.swing.JTable tbVList;
  private com.xzq.osc.JocValueField vlfKeyValue;
  // End of variables declaration//GEN-END:variables
  private ValuePicker valuePicker;
  private ListPickerModel listPickerModel;

  private void customInitialize() {
    listPickerModel = new ListPickerModel();
    listPickerModel.addTableModelListener(new TableModelListener() {
      @Override
      public void tableChanged(TableModelEvent e) {
        cmbKeyValueClass.setEnabled(listPickerModel.getRowCount() == 0);
      }
    });
    for (Object keyValueClass : valueModelMap.keySet()) {
      ((DefaultComboBoxModel) cmbKeyValueClass.getModel())
              .addElement(keyValueClass);
    }
    tbVList.setModel(listPickerModel);
    TableColumnModel columns = tbVList.getColumnModel();
    columns.getColumn(0).setCellEditor(cedKeyValue);
    columns.getColumn(1).setCellEditor(cedDisplayText);
    columns.getColumn(0).setPreferredWidth(100);
    columns.getColumn(1).setPreferredWidth(300);
  }

  public ValuePicker getValuePicker() {
    if (!btnAdd.isEnabled()) {
      return valuePicker;
    }
    if (tbVList.isEditing()) {
      tbVList.getCellEditor().stopCellEditing();
    }
    List<ValuePickEntry> pickList = listPickerModel.getValuePickList();
    for (int row = pickList.size() - 1; row >= 0; row--) {
      ValuePickEntry entry = pickList.get(row);
      if (OrchidUtils.isEmpty(entry.getKey())
              && OrchidUtils.isEmpty(entry.getText())) {
        pickList.remove(row);
      }
    }
    return pickList.isEmpty()
            ? null : new ListValuePicker(getDispalyFormat(), pickList);
  }

  private int getDispalyFormat() {
    switch (cmbDisplayFormat.getSelectedIndex()) {
      case 1:
        return ListValuePicker.KEY_ONLY;
      case 2:
        return ListValuePicker.TEXT_ONLY;
      case 3:
        return ListValuePicker.KEY_AND_TEXT;
      default:
        return ListValuePicker.UI_DEFAULTS;
    }
  }

  public void updatePane(ValuePicker valuePicker) {
    this.valuePicker = valuePicker;
    if (valuePicker instanceof ListValuePicker) {
      cmbDisplayFormat.setSelectedIndex(
              getFormatIndex((ListValuePicker) valuePicker));
      listPickerModel.setValuePickList(
              ((ListValuePicker) valuePicker).getValuePickList());
    } else {
      listPickerModel.setValuePickList(null);
    }
    cmbKeyValueClass.setSelectedItem(ValuePickerCode
            .getKeyValueClass(listPickerModel.getValuePickList()));
    btnAdd.setEnabled(valuePicker == null
            || valuePicker instanceof ListValuePicker);
    btnDelete.setEnabled(btnAdd.isEnabled());
    cmbDisplayFormat.setEnabled(btnAdd.isEnabled());
    cmbKeyValueClass.setEnabled(btnAdd.isEnabled());
  }

  private int getFormatIndex(ListValuePicker valuePicker) {
    switch (valuePicker.getDisplayFormat()) {
      case ListValuePicker.KEY_ONLY:
        return 1;
      case ListValuePicker.TEXT_ONLY:
        return 2;
      case ListValuePicker.KEY_AND_TEXT:
        return 3;
      default:
        return 0;
    }
  }

  private static class ListPickerModel extends AbstractTableModel {

    private String keyTitle;
    private String textTitle;
    private Class<?> keyValueClass;
    private List<ValuePickEntry> valuePickList;

    public ListPickerModel() {
      keyValueClass = String.class;
      keyTitle = BeanInfoResource.getString("PICKER_KEY_TITLE");
      textTitle = BeanInfoResource.getString("PICKER_TEXT_TITLE");
    }

    public List<ValuePickEntry> getValuePickList() {
      return valuePickList;
    }

    public void setValuePickList(List<ValuePickEntry> valuePickList) {
      if (valuePickList == null) {
        this.valuePickList = new ArrayList<ValuePickEntry>();
      } else {
        this.valuePickList = new ArrayList<ValuePickEntry>(valuePickList);
      }
      fireTableDataChanged();
    }

    public void setKeyValueClass(Class keyValueClass) {
      this.keyValueClass = keyValueClass;
    }

    @Override
    public int getRowCount() {
      return valuePickList.size();
    }

    @Override
    public int getColumnCount() {
      return 2;
    }

    @Override
    public String getColumnName(int column) {
      return column == 0 ? keyTitle : textTitle;
    }

    @Override
    public Class<?> getColumnClass(int columnIndex) {
      return columnIndex == 0 ? keyValueClass : String.class;
    }

    @Override
    public Object getValueAt(int rowIndex, int columnIndex) {
      ValuePickEntry item = valuePickList.get(rowIndex);
      return columnIndex == 0 ? item.getKey() : item.getText();
    }

    @Override
    public boolean isCellEditable(int rowIndex, int columnIndex) {
      return true;
    }

    public void appendRow() {
      int index = valuePickList.size();
      valuePickList.add(new ValuePickEntry(null, ""));
      fireTableRowsInserted(index, index);
    }

    public void removeRow(int row) {
      valuePickList.remove(row);
      fireTableRowsDeleted(row, row);
    }

    @Override
    public void setValueAt(Object aValue, int rowIndex, int column) {
      ValuePickEntry item = valuePickList.get(rowIndex);
      Object keyValue = column == 0 ? aValue : item.getKey();
      String text = column == 0 ? item.getText() : aValue.toString();
      valuePickList.set(rowIndex, new ValuePickEntry(keyValue, text));
      fireTableCellUpdated(rowIndex, column);
    }
  }
}